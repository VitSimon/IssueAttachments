version: '3.5'

services:
  portainerservice:
    image: portainer/portainer-ce:2.6.2-alpine
    container_name: ${NETWORK_NAME}_MgrInfrastructure
    volumes:
      - ./portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${NETWORK_PORT_PORTAINER}:9000"

  db:
    image: mariadb:10.6.2-focal
    container_name: ${NETWORK_NAME}_db
    restart: always
    volumes: 
      - ${MARIADB_CONF_DIR}:/var/docker/mariadb/conf
      - "${MARIADB_DATA_DIR}:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
#      MYSQL_USER: "${MYSQL_USER}"
#      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    networks:
      - default

  adminer:
    image: adminer:4.8.1-standalone
    container_name: ${NETWORK_NAME}_MgrDB
    restart: always
    ports:
      - ${NETWORK_PORT_ADMINER}:8080
    depends_on:
      - db
    links:
      - "db:database"
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql
      ADMINER_DEFAULT_DB_HOST: mariadb
      ADMINER_DEFAULT_DB_NAME: adminer
      ADMINER_DESIGN: nette
      ADMINER_PLUGINS: tables-filter tinymce
    networks:
      - default

  vcs:
    image: gitea/gitea:1.15.6
    container_name: ${NETWORK_NAME}_vcs
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=mysql
      - GITEA__database__HOST=db:3306
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=${MYSQL_USER}
      - GITEA__database__PASSWD=${MYSQL_PASSWORD}
    restart: always
    networks:
      - default
    volumes:
      - ./giteadata:/data
      - ./_backup:/app/gitea/_backup
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "${NETWORK_PORT_VCS}:3000"
      - "222:22"
    depends_on:
      - db

  baget:
    container_name: ${NETWORK_NAME}_artifactory
    depends_on:
      - db
    restart: on-failure
    environment:
      ApiKey: ${ARTIFACTORY_API_KEY}
      Storage__Type: FileSystem
      Storage__Path: /var/baget/packages
      Database__Type: MySql
      Database__ConnectionString: "User ID=${MYSQL_USER};Password=${MYSQL_PASSWORD};Host=db;Database=baget;Pooling=true;"
      Search__Type: Database
    image: loicsharma/baget
    logging:
      driver: journald
    networks:
      - default
    ports:
      - "${NETWORK_PORT_BAGET}:80"
    volumes:
      - ./baget-data:/var/baget

  registry_docker:
    container_name: ${NETWORK_NAME}_registry_docker
    image: registry:2.7.1
    restart: always
    ports:
      - ${NETWORK_PORT_REGISTRY}:5000
    volumes:
      - ./registry-data:/var/lib/registry:rw
      - ./config-docker-registry.yml:/etc/docker/registry/config-docker-registry.yml:ro
    networks:
      - default

  cicd-ui:
    container_name: ${NETWORK_NAME}_cicd_ui
    image: metroline/ui:1.1
    restart: unless-stopped
    ports:
      - "${NETWORK_PORT_CICD_UI}:80"
    environment:
      METROLINE_SERVER_URL: http://${OUT_NETWORK_ENDPOINT}:${NETWORK_PORT_CICD_SERVER}
      DEBUG: "metroline*"
    networks:
      - default

  cicd-server:
    container_name: ${NETWORK_NAME}_cicd_server
    image: metroline/server:1
    restart: unless-stopped
    ports:
      - "${NETWORK_PORT_CICD_SERVER}:80"
    environment:
      METROLINE_HOST: http://${OUT_NETWORK_ENDPOINT}:${NETWORK_PORT_CICD_SERVER}
      METROLINE_UI_URL: http://${OUT_NETWORK_ENDPOINT}:${NETWORK_PORT_CICD_UI}
      # Generated with "openssl rand -hex 32"
      METROLINE_JWT_SECRET: ${CICD_SECRET_2}
      # Generated with "openssl rand -hex 32" ${NETWORK_IP_VCS}:${NETWORK_PORT_VCS}
      METROLINE_RUNNER_SECRET: ${CICD_SECRET}
      METROLINE_MONGO_URI: mongodb://cicd-mongo:27017/metroline
      METROLINE_GITEA_CLIENT_ID: ${DRO_GITEA_CLIENT_ID}
      METROLINE_GITEA_CLIENT_SECRET: ${DRO_GITEA_CLIENT_SECRET}
      METROLINE_GITEA_URL: http://${OUT_NETWORK_ENDPOINT}:${NETWORK_PORT_VCS}
#      METROLINE_GITEA_URL: http://${NETWORK_NAME}_vcs:3000
      DEBUG: "metroline*"
    networks:
      - default

  cicd-runner-1:
    container_name: ${NETWORK_NAME}_cicd_runner
    image: metroline/runner:1.3
    restart: unless-stopped
    environment:
      METROLINE_SERVER_ADDRESS: http://cicd-server
      METROLINE_RUNNER_SECRET: ${CICD_SECRET}
      METROLINE_JOB_DOCKER_SOCK: /var/run/docker.sock
#      METROLINE_DOCKER_OPTIONS: '{ "HostConfig": { "AutoRemove": true, "NetworkMode": "${NETWORK_NAME}" } }'
      DEBUG: "metroline*"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default

  cicd-mongo:
    container_name: ${NETWORK_NAME}_cicd_db
    image: mongo:4.2-bionic
    restart: unless-stopped
    volumes:
      - ./metroline-mongo:/data/db
    networks:
      - default
